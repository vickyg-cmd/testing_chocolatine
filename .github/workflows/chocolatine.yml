name: Chocolatine workflow
on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'
env:
  MIRROR_URL: ${{ secrets.MIRROR_URL }}
  EXECUTABLES: myworld
jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Run coding style checker
        run: check.sh $(pwd) $(pwd)
      - name: Display coding style errors
        if: always()
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS= read -r line; do
              file=$(echo "$line" | cut -d: -f1)
              line_number=$(echo "$line" | cut -d: -f2)
              error_type=$(echo "$line" | cut -d: -f3)
              error_message=$(echo "$line" | cut -d: -f4-)
              echo "::error file=$file,line=$line_number::$error_type: $error_message"
            done < coding-style-reports.log
            exit 1
          fi
  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Compile program
        timeout-minutes: 2
        run: make
      - name: Clean build files
        run: make clean
      - name: Check executables
        run: |
          IFS=',' read -ra EXEC <<< "${{ env.EXECUTABLES }}"
          for executable in "${EXEC[@]}"; do
            if [ ! -f "$executable" ]; then
              echo "::error file=$executable::Executable not found: $executable"
              exit 1
            elif [ ! -x "$executable" ]; then
              echo "::error file=$executable::File is not executable: $executable"
              exit 1
            fi
          done
  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Run tests
        timeout-minutes: 2
        run: make tests_run
  push_to_mirror:
    needs: run_tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if this is the mirror repo (avoid infinite loop)
        id: mirror-check
        run: |
          origin_url=$(git config --get remote.origin.url)
          echo "Origin URL: $origin_url"
          mirror_url="${{ env.MIRROR_URL }}"
          # Remove possible protocol prefixes for comparison
          clean_origin=$(echo "$origin_url" | sed -e 's/^https:\/\///' -e 's/^http:\/\///' -e 's/^git@//' -e 's/:/\//' -e 's/\.git$//')
          clean_mirror=$(echo "$mirror_url" | sed -e 's/^https:\/\///' -e 's/^http:\/\///' -e 's/^git@//' -e 's/:/\//' -e 's/\.git$//')
          if [ "$clean_origin" = "$clean_mirror" ] || [ -z "$mirror_url" ]; then
            echo "This is the mirror repo or no mirror URL set. Skipping mirroring."
            echo "skip_mirror=true" >> $GITHUB_OUTPUT
          else
            echo "This is the original repo. Proceeding with mirroring."
            echo "skip_mirror=false" >> $GITHUB_OUTPUT
          fi
      - name: Push to mirror
        if: steps.mirror-check.outputs.skip_mirror == 'false'
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}